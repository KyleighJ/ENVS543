---
title: "Textual Data"
format: html
editor: visual
---

```{r}
library( tidyverse )
library ( stringr )
library( readr )

```

```{r}
w <- "'Coding is fun' said Dyer."
x <- "Kyleigh"
y <- 'Johnson'
z <- 'Bob Marley once said, "It is a foolish dog who barks at a passing bird."'

w
x
y
z

print(z)
cat(z)
```

## Creating Text Variables

```{r}
paste("Bob", "is", "not", "Here", "man")
paste("Bob", "is", "not", "Here", "man", sep=", ")

paste( "My favorite number is ", 42, "!", sep="")

```

```{r}
length( z )
nchar(z)
str_length(z)
```

```{r}
vec <- c(w,x,y,z)
vec
length( vec )
str_length( vec )
```

```{r}
a <- 1:10
paste(a)
paste(a, collapse = ", ")

b <- LETTERS[1:10]
b

paste( b, a, sep="-")
paste( a, b, collapse = "x")

```

```{r}
str_c( a,b )

```

## Finding

```{r}
z

```

```{r}
str_detect( z, "Marley")
str_detect( z, "marley")
```

```{r}
str_count( z, "a")
str_count( vec, "Johnson")
```

```{r}
str_locate( z, "dog")
str_locate( vec, "a")
```

```{r}
str_locate_all( vec, "a" )

```

```{r}
str_sub(z, 24, -2)
c <- z
str_sub(c, 24, -2) <- "hey"
c
```

```{r}
str_remove( z, "dog")
str_remove_all( z, "a")
```

```{r}
str_trunc(z, 23)
str_sub(z, 23,24)
```

```{r}
str_to_lower(z)
str_to_upper(z)
str_to_sentence(z)
str_to_title(z)
```

## Regular Expression

-   Make a graphical display of the number of courses in ENVS by course level 100, 200, etc.
-   Make a wordcloud from titles

```{r}
url <- "https://raw.githubusercontent.com/DyerlabTeaching/Textual-Data/refs/heads/main/data/ENVSclasses.txt?token=GHSAT0AAAAAACWO27UIA46V72P7DBZEP5EKZYZFFXQ"

envs <- read_lines( url )
head( envs, 25 )

```

```{r}
str_detect( envs, "ENVS") -> idx

envs[ idx ]
```

```{r}
envs101 <- envs[1]
envs101
```

```{r}
str_view( envs101, "ENVS")
str_view( envs101, "Hour")
str_view( envs101, "o")

# match digits
str_view( envs101, "[:digit:]")
# find all with 3 digits grouped together
str_view( envs101, "[:digit:]{3}")

str_view( envs101, "[:digit:]{2,3}")
```

```{r}
# find punctuation
str_view( envs101, "[:punct:]")
```

```{r}
# find letters
str_view( envs101, "[:alpha:]")
```

```{r}
# find lowercase
str_view( envs101, "[:lower:]")

# find space
str_view( envs101, "[:space:]")

```

```{r}
# combine things you are searching for

str_view( envs101, "[:alpha:]{4} [:digit:]{3}")
str_view( envs101, "[:upper:]{4} [:digit:]{3}")
str_view( envs101, "[:lower:]{4} [:digit:]{3}")
```

```{r}
str_view( envs101, "[A-Z]{4} [0-9]{3}")

```

```{r}
str_view( "Semester course; 3 lecture hours. 3 credits. Prerequisite: ENVS 101 or", "[A-Z]{4} [0-9]{3}")

```

```{r}
#only match if found at beginning of line

str_view( envs101, "^[A-Z]{4} [0-9]{3}")

# only match if found at end of line

str_view( envs101, "[0-9] Hour|s.$")
```

```{r}
str_view( envs101, "^[A-Z]{4} [0-9]{3}.+[0-9] Hour|s.$")

```

```{r}
pattern <- "^[A-Z]{4} [0-9]{3}.+[0-9] Hour[s]?\\.$"
grepl( pattern, envs ) -> idx
titles <- envs[idx]
titles

```

```{r}
str_split( titles, pattern = "\\.")
str_split( titles, pattern = "\\.", simplify = TRUE ) -> raw
raw


data.frame( course = raw[,1],
            title = str_trim(raw[,2]),
            hours = str_trim(raw[,3]), "Hours" ) |>
  mutate( hours = str_remove( hours, "Hour") ) |>
  mutate( hours = as.numeric( str_remove( hours, "s") ) ) |>
  mutate( program = str_split( course, " ", simplify = T)[,1]) |>
  mutate( number = as.numeric( str_split( course, " ", simplify = T)[,2]) ) |>
  select( program, number, title, hours )

df


```




